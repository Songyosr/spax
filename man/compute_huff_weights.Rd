% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_huff_weights.R
\name{compute_huff_weights}
\alias{compute_huff_weights}
\title{Compute Huff-like Spatial Interaction Weights}
\usage{
compute_huff_weights(
  distance,
  method = "gaussian",
  sigma = NULL,
  attractiveness = NULL,
  alpha = 1,
  normalize_method = "standard",
  a0 = 0,
  normalize_params = list(),
  ...
)
}
\arguments{
\item{distance}{SpatRaster of distances/travel times to facilities}

\item{method}{Character string specifying the decay function:
"gaussian", "exponential", "power", "inverse", "binary", or function(distance, ...)}

\item{sigma}{Parameter controlling rate of distance decay}

\item{attractiveness}{Numeric vector of facility attractiveness values}

\item{alpha}{Numeric parameter controlling attractiveness sensitivity (default = 1)}

\item{normalize_method}{Character string specifying normalization method:
"standard", "semi", "reference", or custom function}

\item{a0}{Numeric value for outside option weight (default = 0)}

\item{normalize_params}{List of additional parameters passed to normalize_weights()}

\item{...}{Additional parameters passed to compute_weights()}
}
\value{
SpatRaster stack of probability weights for each facility
}
\description{
Computes probability weights based on Huff's spatial interaction model principles.
Combines distance decay with facility attractiveness and optional outside options.
}
\examples{
\dontrun{
# Basic usage with gaussian decay
weights <- compute_huff_weights(
  distance = distance_raster,
  method = "gaussian",
  sigma = 30,
  attractiveness = facility_sizes
)

# With outside option and semi-normalization
weights <- compute_huff_weights(
  distance = distance_raster,
  method = "gaussian",
  sigma = 30,
  attractiveness = facility_sizes,
  normalize_method = "semi",
  a0 = 0.2
)

# With custom normalization parameters
weights <- compute_huff_weights(
  distance = distance_raster,
  method = "gaussian",
  sigma = 30,
  attractiveness = facility_sizes,
  normalize_method = "reference",
  normalize_params = list(ref_value = 0.5)
)
}
}
